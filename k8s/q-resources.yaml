apiVersion: v1
kind: Service
metadata:
  name: q-resources
  labels:
    app: q-resources
spec:
  # comment or delete the following line if you want to use a LoadBalancer
  type: NodePort
  # if your cluster supports it, uncomment the following to automatically create
  # an external load-balanced IP for the frontend service.
  # type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: q2ffhackaton
---
apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: q-resources
spec:
  selector:
    matchLabels:
      app: q2ffhackaton
  replicas: 1
  template:
    metadata:
      labels:
        app: q2ffhackaton
    spec:
      imagePullSecrets:
        - name: acrsecret
      containers:
      - name: q-resources
        image: q2ffhackaton.azurecr.io/q-resources:latest
        env:
        - name: ResourceAccessSettings__ClientSecret
          value: ""
        - name: ResourceAccessSettings__ResourceUri
          value: ""
        - name: ASPNETCORE_URLS
          value: http://+:80
          # If your cluster config does not include a dns service, then to
          # instead access environment variables to find service host
          # info, comment out the 'value: dns' line above, and uncomment the
          # line below:
          # value: env
        ports:
          - containerPort: 80
            protocol: TCP
        readinessProbe:
          httpGet:
            path: health/readiness
            port: 80
          successThreshold: 3
        livenessProbe:
          httpGet:
            path: health/liveness
            port: 80
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 80
          failureThreshold: 30
          periodSeconds: 10